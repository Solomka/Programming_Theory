***

RESTful web services

REST - це архітектура побудови веб-застосунку (service)
Web service design model

***

While REST stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, 
it is primarily used to build Web services that are lightweight, maintainable, and scalable.

 A service based on REST is called a RESTful service.

 REST is not dependent on any protocol, but almost every RESTful service uses HTTP as its underlying protocol. 

 
 Every system uses resources. These resources can be pictures, video files, Web pages, business information, or anything that can be represented in a computer-based system. 

 The purpose of a service is to provide a window to its clients so that they can access these resources.

 Service architects and developers want this service to be easy to implement, maintainable, extensible, and scalable. A RESTful design promises that and more. 

RESTful services should have following properties and features:

1. Representations (JSON data format)
2. Messages (HTTP requests) - The client and service talk to each other via messages. Clients send a request to the server, and the server replies with a response.
3. URIs (REST requires each resource to have at least one URI)
4. Uniform interface (RESTful systems have a uniform interface. HTTP 1.1 provides a set of methods, called verbs, for this purpose) 
REST recommends a uniform interface and HTTP provides you that uniform interface
5. Stateless
6. Links between resources
7. Caching

***

REST - REpresentational State Transfer:
    * Resource-based forces Action-based
    * Representations (form data passed back and furth between client and server)

Client-server architectural style for networked hypermedia applications

    Resource (noun) identified by URI
    Action (verb) - HTTP request

    Representation is independent from the resource (represent part of the resource state)

    Ex:
    1. Resource - person
    2. Service  - contact info (GET)
    3. Representation - (name, address, phone number) in JSON format
------------------------------------------------------
The six constraints of REST architectual style are: 
------------------------------------------------------

1. Uniform Interface
    * interface between client and server -> HTTP verbs: GET/POST/PUT/DELETEs
2. Stateless
    * server (host of restful service) contain no client data
    * each request contains enough context to process the message

    HOST:
        - a computer system (bla_api) that is accessed by a user (bla) working at a remote location
        - a computer with a Web server (bla_api) that serves the pages for one or more Web sites.
        - Hosting - service that is provided by the company (host ), when your Web server that serves the pages the Web site is located on company computer. 
        - Host - computer that provides services (server)
        - computer (large server) - a host provider of services
        *** mainframe computer (large server) with server (host of restful service) ---> HOST (bla_api) (a host provider of restful services)-------------  SERVER ------------- http://bla_api <--  domain
            intelligent workstations ---> use mainframe computer (large server) as a HOST PROVIDER OF SERVICES ----------- CLIENT --------http://bla <-- domain
        *** http://bla_api - REST APi
        *** http://bla - REST service
        * Domain names are used in URLs to identify particular Web pages. 
          For example, in the URL http://www.pcwebopedia.com/index.html, the domain name is pcwebopedia.com.
        * Because the Internet is based on IP addresses, not domain names, every Web server requires a Domain Name System (DNS) server to translate  domain names into IP addresses.


3. Cacheable 
    * (server responses (representations) are cacheable)
    * everything that comes from server or REST service is cacheable
4. Client-Server architecture
5. Layered System
    * layered architecure:
        - client can't assume direct connection to server  => software or hardware intermediaries between client and server
6. Code on Demand (optional)
    * server transfer logic to client (js code)
    * client execute logic (js code)

***

Web service follows four basic design principles:

- Use HTTP methods explicitly.
- Be stateless.
- Expose directory structure-like URIs.
- Transfer XML, JavaScript Object Notation (JSON), or both.

Process:

-resource - noun - resource URI
-access this resource - verb - HTTP method
-accept info of the resource in the appropriate form - JSON

***
Representations (представлення)
***

The focus of a RESTful service is on resources and how to provide access to these resources. A resource can easily be thought of as an object as in OOP. A resource can consist of other resources. While designing a system, the first thing to do is identify the resources and determine how they are related to each other. This is similar to the first step of designing a database: Identify entities and relations.

Once we have identified our resources, the next thing we need is to find a way to represent these resources in our system.

For example, depending on your requirement, you can decide to use JSON or XML. If you are building Web services that will be used by Web pages for AJAX calls, then JSON is a good choice. 

JSON representation of a resource:

{
    "ID": "1",
    "Name": "M Vaqqas",
    "Email": "m.vaqqas@gmail.com",
    "Country": "India"
}

A good representation should have some obvious qualities:

1. Both client and server should be able to comprehend this format of representation.

2. A representation should be able to completely represent a resource. If there is a need to partially represent a resource, then you should think about breaking this resource into child resources. Dividing big resources into smaller ones also allows you to transfer a smaller representation. Smaller representations mean less time required to create and transfer them, which means faster services.

3. The representation should be capable of linking resources to each other. This can be done by placing the URI or unique ID of the related resource in a representation (more on this in the coming sections).

***

Messages

***

 The client and service talk to each other via messages.
 Clients send a request to the server, and the server replies with a response. 
 Apart from the actual data, these messages also contain some metadata about the message. It is important to have some background about the HTTP 1.1 request and response formats for designing RESTful Web services.

***
Addressing Resources
***

REST requires each resource to have at least one URI.

The job of a URI is to identify a resource or a collection of resources.

The actual operation is determined by an HTTP verb.The URI should not say anything about the operation or action. This enables us to call the same URI with different HTTP verbs to perform different operations.

http://MyService/Persons/1

This URL has following format: Protocol://ServiceName/ResourceType/ResourceID

Query parameter:

http://MyService/Persons?id=1

You should use query parameters only for the use they are intended for: providing parameter values to a process.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
********************************************* HTTP METHODS *****************************************************
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
***

Uniform Interface

***
RESTful systems should have a uniform interface. HTTP 1.1 provides a set of methods, called verbs, for this purpose. Among these the more important verbs are:

HTTP 1.1 methods, verbs:

GET - READ - Safe + Idempotent - GET /addresses/1
POST - CREATE/UPDATE- N/A      - POST /addresses
PUT - UPDATE/CREATE - Idempotent - replace and existing entity - PUT /addresses/1
DELETE - DELETE - Idempotent   - DELETE /addresses/1
OPTIONS - List the allowed operations on a resource - Safe
HEAD - Return only the response headers and no response body - Safe
PATCH - Idempotent - Update only the specified fields of an entity at a URI - PATCH  /addresses/1

* Safe operation  - does not have any effect on the original value of the resource

For example, the mathematical operation "divide by 1" is a safe operation because no matter how many times you divide a number by 1, !!! the original value will not change !!!

* Idempotent operation -  gives the same result no matter how many times you perform it.

For example, the mathematical operation "multiply by zero" is idempotent because no matter how many times you multiply a number by zero, !!! the result is always same !!!

GET -  the most popular method on the Web

HEAD returns only the response headers with an empty body.
This method can be used in a scenario when you do not need the entire representation of the resource.
For example, HEAD can be used to quickly check whether a resource exists on the server or not.

The method OPTIONS is used to get a list of allowed operations on the resource. For example consider the request:

OPTIONS http://MyService/Persons/1 HTTP/1.1
HOST: MyService
The service after authorizing and authenticating the request can return something like:

200 OK
Allow: HEAD, GET, PUT
The second line contains the list of operations that are allowed for this client.

***
Difference between PUT and POST
***

* PUT is idempotent while POST is not

No matter how many times you send a PUT request, the results will be same.
Making a POST multiple times may result in multiple resources getting created on the server.

* PUT require a complete URL, POST not

PUT http://MyService/Persons/ - WORNG
PUT http://MyService/Persons/1 - RIGHT - Insert a new person with PersonID=1 if it does not already exist, or else update the existing resource
POST http://MyService/Persons/ - Insert a new person every time this request is made and generate a new PersonID.
POST http://MyService/Persons/10 - Update the existing person where PersonID=1

***
GET vs POST
***
Безопасные — это методы, которые могут лишь запросить информацию.
 Они не могут изменить запрашиваемый ресурс, не могут привести к нежелательным результатам для пользователя или сервера. Примерами безопасных есть запрос HTML кода веб страницы или изображения. 
 К безопасным относятся методы HEAD и GET.

Небезопасные запросы могут менять содержимое ресурса, к которому обращаются. 
Примеры таких запросов: отправка сообщений, регистрация, онлайн платежи.
 К небезопасным относятся методы POST, PUT, DELETE.

Идемпотентность — свойство методов, которые при многочисленном повторном обращении вернут один и тот же результат, кроме случаев когда информация устарела. Это значит, что при обращении к одному и тому же URL все пользователи будут видеть одну и туже веб страницу, изображение, видео и т.п. Таким свойством обладают GET, PUT, DELETE методы.

GET

предназначен для получения данных с сервера;
тело запроса пустое;
обрабатываются на стороне сервера быстрее и с меньшим потреблением ресурсов сервера за счет пустого тела запроса;
передача переменных происходит в адресной строке (так видит пользователь, технически данные предаются в строке запроса) и поэтому видна информация о переменных и их значениях (данные не защищены);
способен передать небольшое количество данных на сервер: есть ограничения на длину URL, которое зависит от браузера, например, IE6 = 2Kb. На это число и рекомендуют ориентироваться разработчики Yahoo!;
может передать только ASCII символы;
такой запрос можно скопировать, сохранить (например, в закладках);
запрос может кэшироваться (этим можно управлять);
для дополнительного снижения нагрузки на канал и сервер доступны условные и частичные запросы;
не разрывает HTTP соединение (при включенном на сервере режиме keepAlive).

POST

предназначен для отправления данных на сервер;
передача данных происходит в теле запроса;
обработка на стороне сервера медленнее и «тяжелее», чем GET, потому что помимо заголовков нужно анализировать тело запроса;
способен передать большие объемы данных;
способен передать файлы;
страницу, сгенерированную методом POST нельзя сохранить в закладки;
разрывает HTTP соединение;
для передачи даже очень малого объема информации большинством браузеров отправляет минимум два TCP пакета: заголовок, а потом тело запроса.

Простой выбор между GET и POST

если по логике будет происходить небезопасный запрос — использую POST;
если идемпотентность нежелательна — использую POST;
если требуется передать большой объем данных или файл — использую POST;
в остальных случаях использую GET.

HTTP status codes

Status codes indicate the result of the HTTP request.

1XX - informational
2XX - success
3XX - redirection
4XX - client error
5XX - server error

Media types

The Accept and Content-Type HTTP headers can be used to describe the content being sent or requested within an HTTP request. 
The client may set Accept to application/json if it is requesting a response in JSON. 
Conversely, when sending data, setting the Content-Type to application/xml tells the client that the data being sent in the request is XML.


***
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
***
Statelessness
***

A RESTful service is stateless and does not maintain the application state for any client. 

 A request cannot be dependent on a past request and a service treats each request independently. 
 HTTP is a stateless protocol by design.

A stateless design looks like so:

Request1: GET http://MyService/Persons/1 HTTP/1.1

Request2: GET http://MyService/Persons/2 HTTP/1.1

Each of these requests can be treated separately.

A stateful design, on the other hand, looks like so:

Request1: GET http://MyService/Persons/1 HTTP/1.1

Request2: GET http://MyService/NextPerson HTTP/1.1

To process the second request, the server needs to remember the last PersonID that the client fetched. In other words, the server needs to remember the current state — otherwise Request2 cannot be processed.

 Design your service in a way that a request never refers to a previous request. 
 Stateless services are easier to host, easy to maintain, and more scalable. Plus, such services can provide better response time to requests, as it is much easier to load balance them.

***
Links Between Resources
***

A resource representation can contain links to other resources like an HTML page contains links to other pages. 

Let's consider the case in which a client requests one resource that contains multiple other resources:

<Club>        
    <Name>Authors Club</Name>
    <Persons>
        <Person>
            <Name>M. Vaqqas</Name>
            <URI>http://MyService/Persons/1</URI>
        </Person>
        <Person>
            <Name>S. Allamaraju</Name>
            <URI>http://MyService/Persons/12</URI>
        </Person>
    </Persons>
</Club>   

***
Caching
***

Caching is the concept of storing the generated results and using the stored results instead of generating them repeatedly if the same request arrives in the near future. 

Caching can be controlled using HTTP headers:
 0 Date
 0 Last Modified
 0 Cache-Control:
 		Directives:
 			- Public
 			- Private
 			- no-cache/no-store
 			- max-age
 			- s-maxage
 			- must-revalidate
 			- proxy-validate

0 Expires
0 Age

***

 You should document every resource and URI of your serviice for client developers. 

 Service - набір методів, що забезпечують доступ до ресурсів цього сервісу
 Client - застосунок, що доступається до ресурсів сервісу і використовує їх, наприклад, відображає ці ресурси на екран

 Clients send a request to the server, and the server replies with a response. 

***
REST is a great way of developing lightweight Web services that are easy to implement, maintain, and discover. HTTP provides an excellent interface to implement RESTful services with features like a uniform interface and caching.

HTTP methods (verbs):

1. GET - The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no1 other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction.

2. HEAD - The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.

3. POST - method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.

4. PUT - The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.

5. PATCH - The PATCH method applies partial modifications to a resource.

6. DELETE - The DELETE method deletes the specified resource.

7. OPTIONS - The OPTIONS method returns the HTTP methods that the server supports for the specified URL

8. TRACE - The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.

9. CONNECT - the CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy

HTTP - stateless protocol

GET - READ - Safe + Idempotent - GET /addresses/1
HEAD - Return only the response headers and no response body - Safe + Idempotent
OPTIONS - List the allowed operations on a resource - Safe + Idempotent
TRACE - echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.(Save + Idempotent)

PUT - UPDATE/CREATE - Idempotent - replace and existing entity - PUT /addresses/1
DELETE - DELETE - Idempotent   - DELETE /addresses/1

POST - CREATE/UPDATE- N/A      - POST /addresses



PATCH - Idempotent - Update only the specified fields of an entity at a URI - PATCH  /addresses/1
