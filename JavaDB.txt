1. commons-dbcp-1.4.jar

public class DataSource {
    Connection connection = null;
    BasicDataSource bdSource = new BasicDataSource();

    public DataSource() {
        bdSource.setDriverClassName("com.mysql.jdbc.Driver");
        bdSource.setUrl("jdbc:mysql://localhost/atm");
        bdSource.setUsername("Solomka");
        bdSource.setPassword("solomka77");
    }

    public Connection createConnection() {
        Connection con = null;
        try {
            if (connection != null) {
                System.out.println("Cant create a New Connection");
            } else {
                con = bdSource.getConnection();
            }
        } catch (Exception e) {
            System.out.println("Error Occured " + e.toString());
        }
        return con;
    }
}

@Override
    public List<ATM> getAllATMs() throws RemoteException {
        DataSource dataSource = new DataSource();
        Connection con = dataSource.createConnection();
        Statement stmt = null;
        ResultSet rs = null;
        List<ATM> atmsList = new ArrayList<ATM>();
        try {
            String query = "SELECT * \n FROM  `atm`";
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                ATM atm = new ATM();
                atm.setAtmId(rs.getInt("atm_id"));

                DebitAccountDao debitDao = new DebitAccountDaoImpl();
                CreditAccountDao creditDao = new CreditAccountDaoImpl();

                if (creditDao.getCreditAccount(rs.getInt("account_id")) == null && debitDao.getDebitAccount(rs.getInt("account_id")) == null ) {
                    //
                }

                else if (creditDao.getCreditAccount(rs.getInt("account_id")) == null) {
                    DebitAccount debAcc = debitDao.getDebitAccount(rs
                            .getInt("account_id"));
                    atm.setDebitAccount(debAcc);

                } else  {
                    CreditAccount credAcc = creditDao.getCreditAccount(rs
                            .getInt("account_id"));
                    atm.setCreditAccount(credAcc);
                } 

                atm.setAddress(rs.getString("address"));

                atmsList.add(atm);

            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception exe) {
                exe.printStackTrace();
            }

        }
        return atmsList;
    }

***
Interface Connection
***

A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection.

A Connection object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the getMetaData method.

***
Interface Statement
***

The object used for executing a static SQL statement and returning the results it produces.

By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a current ResultSet object of the statement if an open one exists.


        BasicDataSource bdSource = new BasicDataSource();

        bdSource.setDriverClassName("com.mysql.jdbc.Driver");
        bdSource.setUrl("jdbc:mysql://localhost/atm");
        bdSource.setUsername("Solomka");
        bdSource.setPassword("solomka77");

        Connection connection =  bdSource.getConnection();

        DataSource dataSource = new DataSource();
        Connection con = dataSource.createConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            String query = "SELECT * FROM atm where atm_id=" + atmId;
            stmt = con.createStatement();
            rs = stmt.executeQuery(query);

} catch (SQLException e) {
            e.printStackTrace();
        }

        finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception exe) {
                exe.printStackTrace();
            }

        }

2.  JDBCTemplate && commons-dbcp-1.4.jar

    dispatcher-servlet.xml

  //Construct a new JdbcTemplate, given a DataSource to obtain connections from.
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource" />
    </bean>

    <!-- DataSource configuration of database -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/supermarket" />
        <property name="username" value="Solomka" />
        <property name="password" value="solomka77" />
    </bean>

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<Employee> getAllEmpl() {
        String sql = "SELECT * FROM Employee ORDER BY surname";

        List<Employee> empls = jdbcTemplate.query(sql, new BeanPropertyRowMapper(Employee.class));

        if (empls.isEmpty()) {
            return null;
        } else {
            return empls;
        }
    }

***
org.springframework.jdbc.core
Class JdbcTemplate
***



3. 
//Hibernate implemets JPA
 @Autowired
 private SessionFactory sessionFactory;

//JPA
 @PersistenceContext
 EntityManager entityManager;