Мова над алфавитом   

Мова (формальна) над алфавитом  – множина ланцюжків(слів, що склажаються з символів алфавіту)в , не обов’язково скінчена.

Граматика – математичний об’єкт для візначення мови.

 Використовуються два  алфавіта(не перетинаються):
N – множина нетермінальних символів.
 - множина термінальних символів, з яких утворюються слова або ланцюжки мови.

Правило підстановки (продукція, аксіома) – впорядкована пара ланцюжків виду:
                       xy, 

Породжуюча граматика мови  - це  четвірка 

             G = (N, , S,R),

 де N - алфавіт нетермінальних символіа
    Е - множине термінальих символів
    S - початковий символ алфавіту
    R - множина продукцій (правил виводу)

Приклад:

        G=({A, S}, {0,1}, S, R )                      
        R: S->1A00                    
            A0->0A1              
             A->е
        L(G)={100, 1010} - мова (множина слів не обовязково скінченна), породжена граматикою

Мова L(G), породжена граматикою G, – це  множина 

                    L(G) = {w | S * w},    
  де w*.


Класифікація формальних мов Наома Хомського: ( ієрархією Хомського )

*************************************************************************

       Лексичний аналіз      vs          Синтаксичний аналіз
Лексичний аналізатор (сканер)      Синтаксичний аналізатор (парсер)


***
Лексичний аналіз
***

Лексичний аналіз - процес перетворення послідовності лексем у послідовність токенів
лексичний аналіз використовують для підсвітки синтаксису певних мов.

Лексичний аналізатор є скінченним автоматом, перехід в певні стани якого викликає функції, які зазвичай повертають тип/клас лексеми, і саму лексему.

Процес утворення позначок (токенів) з вихідного потоку називається видобуванням позначок (англ. tokenization) і аналізатор впорядковує їх за відповідними типами. 
Лексичний аналізатор зазвичай нічого не робить з об'єднаннями позначок (послідовінстю токенів), це завдання припадає на синтаксичний аналізатор.
Наприклад, типовий лексичний аналізатор розпізнає дужки як лексеми, але перевіряє відповідність '(' і ')' дужок.


Лексема (слово) — послідовність машинних символів вихідного коду програми, що мають певне сукупне значення.

Класи лексем (Шаблон токена )

зарезервовані слова
ідентифікатори
числові константи
(цілі та дійсні числа)

літерні константи
рядкові константи
коди операторів
коментарі, які безпосередньо не несуть інформації щодо структури програми; транслятором не сприймаються, синтаксичному аналізатору не передаються.
дужки й інші елементи програми.

Токен — об'єкт, що утворюється із лексеми в процесі лексичного аналізу.
Шаблон токена — формальний опис класу лексем, які можуть утворити даний тип токена.

тип токена  приклади лексем  опис (шаблон токена)
string  "Мова \"C\" "    рядкова стала
id  Name01  ідентифікатор
relop   >=  операції відношення
num 13  число

Lexem: мама Type (Клас): слово

Наступним кроком іде синтаксичний аналіз.
Звідти, витрактовані дані можуть бути завантажені в структури даних для загального використання, інтерпретації, компіляції.

***
Синтаксичний аналіз
***

Синтаксичним аналізом (па́рсинг) (англ. parsing) (розбором) називається процес, що визначає,  чи породжується даний рядок лексем даною формальною граматикою (чи належить лексема даній мові, яка породжується даною, зазвичай, контекстно-вільною граматикою).

Виконання синтаксичного аналізу здійснюється розпізнавачами (автоматами) (синтаксичними аналізторами).
Синтаксичний аналіз дає відовідь на запитання: чи належить аналізований ланцюжок машинних символів (лексема) множині правильних ланцюжків (лексем) заданої мови. 

Під час синтаксичного аналізу текст оформлюється у структуру даних, зазвичай — в дерево розбору, яке відповідає синтаксичній структурі вхідної послідовності, і добре підходить для подальшої обробки.
Зазвичай синтаксичні аналізатори працюють в два етапи:
     на першому  - ідентифікуються осмислені токени (виконується лексичний аналіз)
                 - на другому створюється дерево розбору.

Найчастіше парсери використовуються для розбору тексту вихідного коду комп'ютерних мов програмування.
Комп'ютерні мови програмування мають відносно просту граматику з невеликою кількістю виключень. 
Парсер мови програмування зазвичай заснований на контекстно-вільній граматиці, оскільки на її основі можна написати простий та ефективний парсер.

Основна ідея Хомського полягала в тому,що семантика(смисл) речення мови пов’язана з  його синтаксичною структурою.
Структура  задається продукціями граматики, яка породжує мову, і представляє собою ієрархічне розбиття об’єкта на пов’язані між собою частини 

Синтаксичний аналізатор(СА)  може бути побудований для будь-якої граматики. Але найбільш ефективні аналізатори будуються для КВ граматик.

Синтаксичний аналізатор (англ. parser) — це програма або частина програми, яка виконує синтаксичний аналіз.

***

Лесичний аналізатор (сканер) (для підсвітки синтаксису мов програмування) => 
                        Lexem: , Lexem class: розділовий знак

Синтаксичний аналізатор (парсер) (для розбору тексту вихідного коду комп'ютерних мов програмування) => 


******************************************************************************************





Лесичний аналіз

Лесичний аналіз - процес перетворення леким у токени

Лексичний розбір - це процес перетворення послідовності символів в послідовність токенів (груп символів що відповідають певним шаблонам), та визначення їх типів. Програма, чи функція що виконує лексичний аналіз, називається лексичним аналізатором, чи сканером. Часто сканер є звичайною функцією що використовується парсером (синтаксичним аналізатором), для отримання наступного токена з потоку вхідних символів в процесі компіляції.

*** Лексема vs Токен ***

Lexem: мама Type: слово

Лексема (слово) — послідовність машинних символів вихідного коду програми, що мають певне сукупне значення.

Класи лексем
Для більшості мов програмування актуальні такі класи лексем:

зарезервовані слова
ідентифікатори
числові константи
(цілі та дійсні числа)

літерні константи
рядкові константи
коди операторів
коментарі, які безпосередньо не несуть інформації щодо структури програми; транслятором не сприймаються, синтаксичному аналізатору не передаються.
дужки й інші елементи програми.

Токен — об'єкт, що утворюється із лексеми в процесі лексичного аналізу.

У прикладному програмуванні поняття токену та його лексема можуть не розрізнятися.

Шаблон токена — формальний опис класу лексем, які можуть утворити даний тип токена.

тип токена  приклади лексем опис
string  "Мова \"C\" "    рядкова стала
id  Name01  ідентифікатор
relop   >=  операції відношення
num 13  число


        ****

 Також часто лексичний аналіз використовують для підсвітки синтаксису певних мов.

Лексичний розбирач є скінченним автоматом, перехід в певні стани якого викликає функції, які зазвичай повертають тип лексеми, і саму лексему (токен).

Позначка(лексема/токен) — це рядок літералів (мама - слово), впорядкованих відповідно до правил (наприклад, IDENTIFIER, NUMBER, COMMA). Процес утворення позначок з вихідного потоку називається видобуванням позначок (англ. tokenization) і розбирач впорядковує їх за відповідними типами. Лексичний розбирач зазвичай нічого не робить з об'єднаннями позначок, це завдання припадає на синтаксичний розбирач. Наприклад, типовий лексичний розбирач розпізнає дужки як позначки, але перевіряє відповідність '(' і ')' дужок.

Позначки часто визначаються за допомогою регулярних виразів, що зрозумілі генераторам лексичних розбирачів таким як lex. Лексичний розбирач (чи створений автоматично приладдям на кшталт lex або вручну) читає потік символів, визначає лексеми в потоці, і впорядковує їх як позначки. Це називається «видобуванням позначок». Якщо розбирач натрапляє на непридатну позначку, він звітує про помилку.

Наступним кроком іде синтаксичний розбір. Звідти, витрактовані дані можуть бути завантажені в структури даних для загального використання, інтерпретації, компіляції.

Синтакси́чний ана́ліз
Синтакси́чний ана́ліз (па́рсинг) (англ. parsing) — в інформатиці це процес аналізу вхідної послідовності символів, з метою розбору граматичної структури згідно із заданою формальною граматикою. Синтаксичний аналізатор (англ. parser) — це програма або частина програми, яка виконує синтаксичний аналіз.

Під час синтаксичного аналізу текст оформлюється у структуру даних, зазвичай — в дерево, яке відповідає синтаксичній структурі вхідної послідовності, і добре підходить для подальшої обробки. Зазвичай синтаксичні аналізатори працюють в два етапи: на першому ідентифікуються осмислені токени (виконується лексичний аналіз), на другому створюється дерево розбору.

Найчастіше парсери використовуються для розбору тексту вихідного коду комп'ютерних мов програмування. Вони мають відносно просту граматику з невеликою кількістю виключень. Парсер мови програмування звичайно заснований на контекстно-вільній граматиці, оскільки на її основі можна написати простий та ефективний парсер.

Лесичний аналізатор (сканер) (для підсвітки синтаксису мов програмування) => 
                        Тoken/Lexem: , Type: розділовий знак

Синтаксичний аналізатор (парсер) (для розбору тексту вихідного коду комп'ютерних мов програмування) => 

Визначення синтаксичного аналізу

Синтаксичним аналізом (розбором) називається процес, що визначає,  чи породжується даний рядок лексем даною граматикою.
Виконання синтаксичного розбору здійснюється розпізнавачами (автоматами). Тож мета доведення полягає в тім, щоб відповісти на запитання: чи належить аналізований ланцюжок множині правильних ланцюжків заданої мови. 
Як правило при розв'язанні цієї задачі будується  дерево розбору.

Основна ідея Хомського полягала в тому,що семантика(смисл) речення мови пов’язана з  його синтаксичною структурою.
Структура  задається продукціями граматики, яка породжує мову, і представляє собою ієрархічне розбиття об’єкта на пов’язані між собою частини 

Синтаксичний аналізатор(СА)  може бути побудований для будь-якої граматики. Але найбільш ефективні аналізатори будуються для КВ граматик.


КР:

1. Які з множин регулярні ? Як це довести ? - побуд скінченний автомат
2. Побудувати скінченний автомат для граматики
Недетермінований автомат транслювати в детермінований
3. Спростити граматику
4. Нормалізувати граматику
                            - Усунути некорисні символи та ланцюжкові правила
                            - Усунути недосяжні символи та л-правила 
                            - Усунути ліву рекурсію
5. Перевірка на LL(1)


