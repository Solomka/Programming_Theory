        ***
GoF "Design Patterns"
        *** 

3 categories of The GoF Design Patterns:
    *  Creational Patterns
        => for the creation of objects

    * Structural Patterns
        => provide a relationship between objects

    * Behavioural Patterns
        => help define how objects interact

    ***

     *  Creational Patterns: *

    * Abstract Factory
        => Allows the creation of objects without specifying their concrete type.
    * Builder
        =>  Used to create complex objects.
    * Factory Method.
        => Creates objects without specifying the exact class to create.
    * Prototype. 
        => Creates a new object from an existing object.
    * Singleton. 
        => Ensures only one instance of an object is created.

     * Structural Patterns: *

    * Adapter.
        => Allows for two incompatible classes to work together by wrapping an interface around one of the existing classes.
    * Bridge. 
        => Decouples an abstraction so two classes can vary independently.
    * Composite. 
        => Takes a group of objects into a single object.
    * Decorator. 
        => Allows for an object’s behavior to be extended dynamically at run time.
    * Facade. 
        => Provides a simple interface to a more complex underlying object.
    * Flyweight. 
        => Reduces the cost of complex object models.
    * Proxy. 
        => Provides a (placeholder interface - тимчасова позиція -> 
                                                an element of a sentence that is required by syntactic constraints but carries little or no semantic information, for example the word it as a subject in it is a pity that she left, where the true subject is that she left) 
                                                to an underlying object to control access, reduce cost, or reduce complexity.

     * Behavioural Patterns: *

    * Chain of Responsibility. 
        => Delegates commands to a chain of processing objects.
    * Command. 
        => Creates objects which encapsulate actions and parameters.
    * Interpreter. 
        => Implements a specialized language.
    * Iterator. 
        => Accesses the elements of an object sequentially(послідовно) without exposing its underlying representation.
    * Mediator. 
        => Allows loose coupling (низька звязАність) between classes by being the only class that has detailed knowledge of their methods.
    * Memento. 
        => Provides the ability to restore an object to its previous state.
    * Observer. 
        => Is a publish/subscribe pattern which allows a number of observer objects to see an event.
    * State. 
        => Allows an object to alter (змінювати) its behavior when its internal state changes.
    * Strategy. 
        => Allows one of a family of algorithms to be selected on-the-fly at runtime.
    * Template Method. 
        => Defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior.
    * Vistor. 
        => Separates an algorithm from an object structure by moving the hierarchy of methods into one object.

    ***

    * Repository pattern (instead of DAO)

       * “A Repository represents all objects of a certain type as a conceptual set. It acts like a collection, except with more elaborate (розвинений) querying capability.”

       ---
       Example
       ---

       package com.thinkinginobjects.repository;
 
        import java.util.List;
        import com.thinkinginobjects.domainobject.Account;
 
        public interface AccountRepository {
 
        void addAccount(Account account);
        void removeAccount(Account account);
        void updateAccount(Account account); // Think it as replace for set
 
        List query(AccountSpecification specification);
 
                                            }

        package com.thinkinginobjects.repository;
 
        import com.thinkinginobjects.domainobject.Account;
 
        public interface AccountSpecification {
 
        boolean specified(Account account);
 
                                                }

        package com.thinkinginobjects.specification;
 
        import org.hibernate.criterion.Criterion;
        import org.hibernate.criterion.Restrictions;
        import com.thinkinginobjects.domainobject.Account;
        import com.thinkinginobjects.repository.AccountSpecification;
        import com.thinkinginobjects.repository.HibernateSpecification;
 
public class AccountSpecificationByUserName implements AccountSpecification, HibernateSpecification {
 
    private String desiredUserName;
 
    public AccountSpecificationByUserName(String desiredUserName) {
        super();
        this.desiredUserName = desiredUserName;
    }
 
    @Override
    public boolean specified(Account account) {
        return account.hasUseName(desiredUserName);
    }
 
    @Override
    public Criterion toCriteria() {
        return Restrictions.eq("userName", desiredUserName);
    }
 
}

    * Gateway design pattern

        * an object that encapsulates access to an external systen or resource
        * used to decouple app access to external resources
        * Gateway can use the persistance layer for storage or retrival th data

    Web -> Gateway -> Repository -> DB(Percistance)