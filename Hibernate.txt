*********************************** Hibernate ***********************************

Bidirectional association 

------------
OrderPO.java
------------

@OneToMany(fetch = FetchType.LAZY, mappedBy = "orderItemId.order", cascade = { CascadeType.PERSIST,
                CascadeType.MERGE })
@Cascade({ org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
    public List<OrderItemPO> getOrderItems() {
        return this.orderItems;
    }

----------------
OrderItemPO.java
----------------

@ManyToOne - owner of the relationship
public OrderPO getOrder() {
       return order;
   }


********************** Hibernate/JPA - annotating bean methods vs fields ************************

Yes, I believe you want to search on field versus property access:

The Spring preference is field access. That's what I follow.

http://docs.spring.io/spring/docs/2.5.x/reference/orm.html

********************** Advanced Hibernate: Proxy Pitfalls *****************************

The proxy class is a subclass of the Person class, so it contains the same fields, but it also contains some added fields.
The most important is CGLIB$CALLBACK_0, which is set to an instance of CGLIBLazyInitializer, which is a Hibernate class:

private CGLIBLazyInitializer CGLIB$CALLBACK_0 =  new CGLIBLazyInitializer();

This is the object that enables the proxy to load the data when needed.
It contains a "target" field, that will contain the Hibernate loaded object when the data is loaded.

************************* Hibernate Eager vs Lazy Fetch Type ****************************

Any time you see a 
@OneToOne
@OneToMany
@ManyToMany 
annotations, you’ve got a relationship.
 What’s important to note is that the fetch type should be specified within those annotations, if you don’t specify one then it defaults to FetchType.LAZY.






 ********
 LINKS
 ********

 http://stackoverflow.com/questions/3927091/save-child-objects-automatically-using-jpa-hibernate
 http://docs.jboss.org/hibernate/core/3.3/reference/en/html/tutorial.html#tutorial-associations-usingbidir
 https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/example-parentchild.html
 https://notesonjava.wordpress.com/2008/11/03/managing-the-bidirectional-relationship/
 http://blog.xebia.com/advanced-hibernate-proxy-pitfalls/
 https://howtoprogramwithjava.com/hibernate-eager-vs-lazy-fetch-type/

 So, the long story short here is:

FetchType.LAZY = Doesn’t load the relationships unless explicitly “asked for” via getter
FetchType.EAGER = Loads ALL relationships

 @OneToMany and @ManyToMany associations are defaulted to LAZY loading; 
 @OneToOne and @ManyToOne are defaulted to EAGER loading. 

 ******************************************************************************************************************************************
                                                                Hibernate

                                                               Restrictions
 ******************************************************************************************************************************************

***
Restrictions.disjunction
***

Example

Hibernate Disjunction, is used to add multiple condition in SQL query separated by OR clause within brackets. To generate following query using Hibernate Criteria we need to use Disjunction.

SQL Query:

select * 
from user_master 
where username = ? OR username = ?

Hiberenate Query:

Criteria criteria = session.createCriteria(User.class);
Disjunction objDisjunction = Restrictions.disjunction();

/* Add multiple condition separated by OR clause within brackets. */
objDisjunction.add(Restrictions.eq("Username", "vicky"));
objDisjunction.add(Restrictions.eq("Username", "thakor"));
        
criteria.add(objDisjunction);
        
criteria.list();

***
Restrictions.conjunction
***

Hibernate Conjunction, is used to add multiple condition in SQL query separated by AND clause  within brackets. To generate following query using Hibernate Criteria we need to use Conjunction.

SQL Query:

select * 
from user_master 
where username = ? AND name = ?

Hiberenate Query:

Criteria criteria = session.createCriteria(User.class);
Conjunction conjunction = Restrictions.conjunction();

/* Add multiple condition separated by AND clause within brackets. */
conjunction.add(Restrictions.eq("Username", "vicky"));
conjunction.add(Restrictions.eq("Username", "thakor"));
        
criteria.add(conjunction);
        
criteria.list();


***

Disjunction disjunction = Restrictions.or(
                        Restrictions.ilike("surname", name, MatchMode.ANYWHERE),
                        Restrictions.ilike("name", name, MatchMode.ANYWHERE),
                        Restrictions.ilike("phone", name, MatchMode.ANYWHERE)
                                        );


 /*
     * PREPARE QUERY STATEMENT
     */

    private Criteria prepare(String query, boolean or) {
        if (query == null)
            query = "";

        String[] names = query.split(" ");
        for(int i = 0; i<names.length; ++i){
            System.out.println("Prepare name: " + names[i]);
        }
        Criteria criteria = createEntityCriteria();
        criteria.addOrder(Order.asc("surname"));        
        
        List<Disjunction> restrictions = new ArrayList<Disjunction>();

        for (String name : names)
            if (!StringUtils.isEmptyOrWhitespaceOnly(name))
                restrictions.add(Restrictions.or(Restrictions.ilike("surname", name, MatchMode.ANYWHERE),
                        Restrictions.ilike("name", name, MatchMode.ANYWHERE),
                        Restrictions.ilike("phone", name, MatchMode.ANYWHERE)));
        
        System.out.println("disjunctions set size: " + restrictions.size());

        /*
         * if any restriction exists
         */
        if (or && restrictions.size() > 0) {
            /*
             * Hibernate Disjunction, is used to add multiple condition in SQL query separated by OR clause within brackets. 
               To generate following query using Hibernate Criteria we need to use Disjunction.
            */
            Disjunction disjunction = Restrictions.disjunction();

            for (Disjunction dis : restrictions)
                disjunction.add(dis);

            criteria.add(disjunction);
        } else if (restrictions.size() > 0) {
            /* 
             * Hibernate Conjunction, is used to add multiple condition in SQL query separated by AND clause  within brackets. 
             * To generate following query using Hibernate Criteria we need to use Conjunction.
             */
            Conjunction conjunction = Restrictions.conjunction();

            for (Disjunction dis : restrictions)
                conjunction.add(dis);

            criteria.add(conjunction);
        }
        return criteria;
    }
