***

Інкапсуляція
Успадкування
Поліморфізм

***

Парадигма ООП[ред.]
Парадигма(ідеологія) об’єктно-орієнтованого програмування (ООП) в даний час стала домінувати в програмному світі. Вона прийшла на зміну структурній техніці програмування, що була розроблена в 1970. Java є повністю об’єктно-орієнтованою мовою, тому потрібно засвоїти принципи ООП якомога краще.

В структурному програмуванні передбачалася розробка окремих алгоритмів та процедур для рішення конкретної задачі. Такий підхід виправдує себе для невеликих задач, проте для великих проектів ООП більш виправдене. В літературі можна знайти приклад, що для реалізації простого веб-браузера необхідно близько 2000 процедур при структурному програмування. При використанні ж ООП можна створити 100 класів з приблизно 20-ма процедурами(далі методами) в кожному з них. Таким чином набагато простіше шукати помилку серед 20-ти методів одного класу ніж шукати її серед 2000 методів.

Як уже говорилося раніше: клас – це певний шаблон, який слугує для створення об’єктів. Ви можете розробити власний клас, а можете отримати його від інших розробників. В інтернеті зараз наявно чимало бібліотек класів різноманітного призначення як безкоштовних так і платних. Наприклад, бібліотеки для промальовування різноманітних діаграм у своїх програмах і т.п.

ООП в java базується на ряді понять (або ж концепцій)[1]:

Клас - певна абстрактна сутність, наприклад, "Пес", "Кіт", "Автомобіль", "Ціна товару", що на програмному рівні представлена змінними (полями даних) та методами, що оперують над цими полями даних.
Об'єкт - конкретний екземпляр класу. Наприклад, зелена "Тойота" вашого сусіда є екземпляром класу "Автомобіль". По суті, це клас, поля якого ініціалізовані і він завантажений у пам'ять комп'ютера. На основі одного класу, можна створити безліч об'єктів.
Успадкування (або ж "спадкоємство") - утворення нових класів на основі інших.
Інтерфейс - посилальний тип даних. Інтерфейси схожі на класи, проте їхні поля даних є константами, а методи не реалізовані. Об'єкти на основі інтерфейсів не створюються, проте класи можуть реалізовувати певний інтерфейс. І через об'єктну змінну інтерфейсного типу можна викликати реалізації даних методів.
Пакети - каталоги, у яких розміщуються класи. Таким чином ми можемо використовувати однойменні класи, оскільки їхнє розрізнення іде не тільки за іменами, але й за розміщенням їх у каталогах (пакетах).

Насправді доволі часто різні автори по різному виділяють головні концепції ООП. Причиною є те, що в ООП справді доволі багато понять. І з плином часу та розвитком програмування їх лише більшає. Різноманітні поняття доволі тісно взаємопов'язані між собою. 

********************

Паради́гма програмува́ння — це система ідей і понять, які визначають стиль написання комп'ютерних програм, а також спосіб мислення програміста.
Парадигма програмування унаочнює те, як програміст розглядає роботу програми; наприклад, за ООП — як множини об'єктів, тоді як за ФП — як послідовності обчислень функцій без станів.

Парадигма програмування — спосіб концептуалізації, що визначає організацію обчислень і структурування роботи, яку виконує комп'ютер

Концептуальна модель  - формальний опис обєкта моделювання, що відображає концепцію (погляд) дослідника на проблему.

Концептуальна модель — модель предметної області, що складається з переліку взаємопов'язаних понять, що використовуються для опису цієї області, разом з властивостями й характеристиками, класифікацією цих понять, за типами, ситуацій, ознаками в даній області і законів протікання процесів в ній. (Тлумачний словник по штучному інтелекту)

Концептуальна (змістовна) модель — це абстрактна модель, що визначає структуру модельованої системи, властивості її елементів і причинно-наслідкові зв'язки, властиві системі і суттєві для досягнення мети моделювання.

Клас - це певна абстрактна сутність, що на програмному рівні представлена полями даних та методами, що оперують над цими полями даних.
Клас - це спеціальна конструкція, що використовується для групування повязаних полів даних та методів.

Обєкт - базовий тип (широке значення)
Обєкт - екземпляр класу (вузьке значення)

Конце́пція (лат. conceptio — розуміння) — система поглядів, те або інше розуміння явищ і процесів; єдиний, визначальний задум. 

В літературі часто виділяють наступні три концепції і навіть вказують, що вони основні для ООП ("три кити"):


інкапсуляція (incapsulation) - концепція побудови класів через закриття(капсулювання) їхньої реалізації.
             ( приховування ) - збирання елементів в одне ціле для створення нової сутності
                              - це спосіб вбудування простіших сутностей (складових частин або компонентів) в агрегати, що утв з них складніші сутності
                              - відмежування абстрактного виконання операції від програмованої реалізації
    приховування ін-фи - одна із складових частин інкапсуляції

успадкування (наслідування) (inheritance) - створення одних класів на основі інших
поліморфізм (polymorphism) - можливість використання батьківських класів замість класів нащадків. По суті є частиною реалізованої в мові концепції успадкуванням.
                           - якість або стан існування різних форм або припущень
                           - можливість використання обєктів одного типу (трик) замість обєктів іншого типу (фігура)
                           - властивості програмного тексту бути придатним для застосування до обєктів двох або більше типів. 

                           Статичний поліморфізм - на етапі компіляції (до початку виконання програми) з виклику стає зрозумілим, яку ф-б викликають (method overloading - перевантаження/поширення ф-й)

                           Динамічний поіморфізм  - компілятор не знає, який метод викликати під час читання коду.(функціональна полісемія, virtual методи)
абстракція - характеристика рис обєкта з точки зору спостерігача (програміста)

Деякі теоретики додають до цих трьох ще "абстрагування". Власне коли програміст створює клас, він створює певну абстракцію, модель чогось із реального світу. Ряд теоретичних книг побудовані на тому, як потрібно створювати класи, їхні ієрархії, зв'язки між ними. Проте переважно вони настільки теоретичні, що практичні програмісти часто питання абстрагування вирішують виходячи із конкретної задачі, яку потрібно вирішити. Щоправда є і винятки. В даний час виділяють так звані Патерни проектування, ряд шаблонів чи то зразків того, як найбільш ефективно вирішити деякі задачі в ООП. Проте для того, щоб їх можна було освоїти, необхідне ґрунтовне вивчення об'єктно-орієнтованого програмування і зокрема наведених вище понять.

Кластерний аналіз (англ. Data clustering) — задача розбиття заданої вибірки об'єктів (ситуацій) на підмножини, що називаються кластерами, так, щоб кожен кластер складався з схожих об'єктів, а об'єкти різних кластерів істотно відрізнялися. Завдання кластеризації відноситься до статистичної обробки, а також до широкого класу завдань навчання без вчителя.


